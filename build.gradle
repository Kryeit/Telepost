plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'fabric-loom' version '1.4.+'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
    mavenCentral()
    maven {
        name = 'GriefDefender'
        url = 'https://repo.glaremasters.me/repository/bloodshot'
    }
    maven {
        name = 'LuckPerms'
        url = 'https://oss.sonatype.org/content/repositories/snapshots'
    }
    maven {
        name = 'Translations API'
        url = 'https://maven.nucleoid.xyz'
    }
    maven {
        name = 'WorldEdit'
        url = 'https://maven.enginehub.org/repo/'
    }
    maven {
        name = "BlueMap"
        url = 'https://jitpack.io'
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings "net.fabricmc:yarn:${yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    implementation "org.iq80.leveldb:leveldb:${leveldb_version}"
    modImplementation "com.griefdefender:api:${griefdefender_version}"
    include(modImplementation("me.lucko:fabric-permissions-api:${luckperms_version}"))
    modImplementation include("xyz.nucleoid:server-translations-api:${servertranslations_version}")
    modImplementation "com.sk89q.worldedit:worldedit-fabric-mc${worldedit_version}"
    compileOnly 'com.github.BlueMap-Minecraft:BlueMapAPI:v2.5.1'
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

shadowJar {
    dependencies {
        include dependency("org.iq80.leveldb:leveldb:${leveldb_version}")
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}
